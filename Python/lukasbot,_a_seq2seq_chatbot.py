# -*- coding: utf-8 -*-
"""LukasBot, A Seq2Seq ChatBot

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uMEKbdr9mIYroGnjc_oTKwnvLhYECLcM
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install tensorflow==2.0.0

import numpy as np
import pandas as pd
import tensorflow as tf
from gensim.models import Word2Vec
import random 
import re

df = pd.read_csv('/content/drive/My Drive/ML EFFORT/Files/lukasdata.csv')

questions = list()
answers = list()

for i, row in df.iterrows():
  questions.append(str(df.iloc[i][1]))
  answers.append(str(df.iloc[i][2]))
answers_with_tags = list()
for i in range(len(answers)):
 answers_with_tags.append(answers[i])

answers = list()
for i in range(len(answers_with_tags)):
    answers.append('<START> ' + answers_with_tags[i] + ' <END>')

print(len(questions))
print(len(answers))
tokenizer = tf.keras.preprocessing.text.Tokenizer(filters='!"#$%&()*+,-./:;<=>?@[\]^_`{|}~\t\n\'0123456789')
tokenizer.fit_on_texts(questions + answers)
VOCAB_SIZE = len(tokenizer.word_index) + 1

print('VOCAB SIZE : {}'.format(VOCAB_SIZE))

vocab = []
for word in tokenizer.word_index:
    vocab.append(word)


def tokenize(sentences):
    tokens_list = []
    vocabulary = []
    for sentence in sentences:
        sentence = sentence.lower()
        sentence = re.sub('[^a-zA-Z]', ' ', sentence)
        tokens = sentence.split()
        vocabulary += tokens
        tokens_list.append(tokens)
    return tokens_list, vocabulary


p = tokenize(questions + answers)
model = Word2Vec(p[0], min_count=1)

embedding_matrix = np.zeros((VOCAB_SIZE, 100))
for i in range(len(tokenizer.word_index)):
  if vocab[i] in model:
    embedding_matrix[i] = model[vocab[i]]
  else:
    embedding_matrix[i] = random.randint(1, 300)

tokenized_questions = tokenizer.texts_to_sequences(questions)
maxlen_questions = max([len(x) for x in tokenized_questions])
padded_questions = tf.keras.preprocessing.sequence.pad_sequences(tokenized_questions, maxlen=maxlen_questions, padding='post')
encoder_input_data = np.array(padded_questions)

print(encoder_input_data.shape, maxlen_questions)

tokenized_answers = tokenizer.texts_to_sequences(answers)
maxlen_answers = max([len(x) for x in tokenized_answers])
padded_answers = tf.keras.preprocessing.sequence.pad_sequences(tokenized_answers, maxlen=maxlen_answers, padding='post')
decoder_input_data = np.array(padded_answers)

print(decoder_input_data.shape, maxlen_answers)

tokenized_answers = tokenizer.texts_to_sequences(answers)
for i in range(len(tokenized_answers)):
    tokenized_answers[i] = tokenized_answers[i][1:]
padded_answers = tf.keras.preprocessing.sequence.pad_sequences(tokenized_answers, maxlen=maxlen_answers, padding='post')
onehot_answers = tf.keras.utils.to_categorical(padded_answers, VOCAB_SIZE)
decoder_output_data = np.array(onehot_answers)

print(decoder_output_data.shape)

encoder_inputs = tf.keras.layers.Input(shape=(None,))
encoder_embedding = tf.keras.layers.Embedding(VOCAB_SIZE, 200, mask_zero=True)(encoder_inputs)
enc_dropped = tf.nn.dropout(encoder_embedding, rate=0.2)
encoder_outputs, state_h, state_c = tf.keras.layers.LSTM(200, return_state=True)(enc_dropped)
encoder_states = [state_h, state_c]

decoder_inputs = tf.keras.layers.Input(shape=(None,))
decoder_embedding = tf.keras.layers.Embedding(VOCAB_SIZE, 200, mask_zero=True)(decoder_inputs)
decoder_lstm = tf.keras.layers.LSTM(200, return_state=True, return_sequences=True)
decoder_outputs, _, _ = decoder_lstm(decoder_embedding, initial_state=encoder_states)
decoder_dense = tf.keras.layers.Dense(VOCAB_SIZE, activation=tf.keras.activations.softmax)
output = decoder_dense(decoder_outputs)

model = tf.keras.models.Model([encoder_inputs, decoder_inputs], output)
model.compile(optimizer=tf.keras.optimizers.RMSprop(), loss='categorical_crossentropy')

model.summary()

model.fit([encoder_input_data, decoder_input_data], decoder_output_data, batch_size=300, epochs=350)
#model.save_weights('my_model_weights.h5')
model.save('lukassave_model.tf')
# model.load_weights('bot_model.h5')


def make_inference_models():
    encoder_model = tf.keras.models.Model(encoder_inputs, encoder_states)
    decoder_state_input_h = tf.keras.layers.Input(shape=(200,))
    decoder_state_input_c = tf.keras.layers.Input(shape=(200,))
    decoder_states_inputs = [decoder_state_input_h, decoder_state_input_c]
    decoder_outputs, state_h, state_c = decoder_lstm(decoder_embedding, initial_state=decoder_states_inputs)
    decoder_states = [state_h, state_c]
    decoder_outputs = decoder_dense(decoder_outputs)
    decoder_model = tf.keras.models.Model(
        [decoder_inputs] + decoder_states_inputs,
        [decoder_outputs] + decoder_states)
    return encoder_model, decoder_model


def str_to_tokens(sentence: str):
    words = sentence.lower().split()
    tokens_list = list()
    for current_word in words:
      if current_word not in tokenizer.word_index:
        continue
      tokens_list.append(tokenizer.word_index[current_word])
    return tf.keras.preprocessing.sequence.pad_sequences([tokens_list], maxlen=maxlen_questions, padding='post')


enc_model, dec_model = make_inference_models()

tf.keras.models.load_model('/content/drive/My Drive/ML EFFORT/Files/save_model.tf')

for _ in range(100):
    states_values = enc_model.predict(str_to_tokens(input('Enter question : ')))
    empty_target_seq = np.zeros((1, 1))
    empty_target_seq[0, 0] = tokenizer.word_index['start']
    stop_condition = False
    decoded_translation = ''
    while not stop_condition:
        dec_outputs, h, c = dec_model.predict([empty_target_seq] + states_values)
        sampled_word_index = np.argmax(dec_outputs[0, -1, :])
        sampled_word = None
        for word, index in tokenizer.word_index.items():
            if sampled_word_index == index:
                decoded_translation += ' {}'.format(word)
                sampled_word = word

        if sampled_word == 'end' or len(decoded_translation.split()) > maxlen_answers:
            stop_condition = True

        empty_target_seq = np.zeros((1, 1))
        empty_target_seq[0, 0] = sampled_word_index
        states_values = [h, c]

    print(decoded_translation)

import pickle
enc_save_classifier = open("enc_model.pickle","wb") #binary write
pickle.dump(enc_model, enc_save_classifier)
enc_save_classifier.close()

dec_save_classifier = open("dec_model.pickle","wb") #binary write
pickle.dump(dec_model, dec_save_classifier)
dec_save_classifier.close()

# #Load the save classifier 
# enc_classifier_saved = open("enc_model.pickle", "rb") #binary read
# classifier_load = pickle.load(enc_classifier_saved)
# classifier_saved.close()

# dec_classifier_saved = open("dec_model.pickle", "rb") #binary read
# classifier_load = pickle.load(dec_classifier_saved)
# classifier_saved.close()

model.load_weights('/content/drive/My Drive/ML EFFORT/Codes/my_model_weights.h5')